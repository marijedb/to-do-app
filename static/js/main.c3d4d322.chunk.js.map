{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","toggleComplete","bind","onClick","deleteTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","searchfield","event","setState","target","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","App","axios","delete","then","response","filter","post","data","uuidv4","get","respons","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c3d4d322.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n            {/* the bind will pass along the ID so you can now which one is checked */}\r\n            <input type=\"checkbox\" onChange={this.props.toggleComplete.bind(this, id)} /> {' '}\r\n            {title}\r\n            <button onClick={this.props.deleteTodo.bind(this, id)} style={btnStyle}>x</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem;\r\n\r\n\r\n// if(this.props.todo.completed) {\r\n//     return {\r\n//         textDecoration: 'line-through'\r\n//     }\r\n// } else {\r\n//     return {\r\n//         textDecoration: 'none'\r\n//     }\r\n// }","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map(todo => {\r\n        return <TodoItem key={todo.id} todo={todo} toggleComplete={this.props.toggleComplete} deleteTodo={this.props.deleteTodo} />;\r\n    });\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>Todo List</h1>\r\n            <Link to=\"/\" style={linkStyle} >Home</Link> | <Link to=\"/about\" style={linkStyle} >About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddTodo extends Component {\r\n    state = {\r\n        searchfield: ''\r\n    }\r\n\r\n    // the event.target.title will make this function reusable for other fields. \r\n    onChange = (event) => {\r\n        this.setState({ [event.target.title]: event.target.value});\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.addTodo(this.state.searchfield);\r\n        this.setState({ searchfield: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n                <input \r\n                    type=\"text\" \r\n                    title=\"searchfield\" \r\n                    placeholder=\"Add Todo...\" \r\n                    style={{flex: '10', padding: '5px'}} \r\n                    value={this.state.searchfield}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value=\"Submit\" \r\n                    className=\"btn\" \r\n                    style={{flex: '1'}} \r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n            <p>This is the Todo List v1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom' \nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=3')\n      .then(respons => this.setState({ todos: respons.data}))\n  };\n\n  toggleComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    })});\n  };\n\n  deleteTodo = (id) => {\n    // ``because you need ID to delete something\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(response => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }));\n  };\n\n  addTodo= (searchfield) => {\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\n      title: searchfield,\n      completed: false\n    })\n      .then(response => {\n        response.data.id = uuidv4();\n        this.setState({ todos: [...this.state.todos, response.data]});\n      });\n    //OR when using uuid: \n    // const newTodo = {\n    //   id: uuidv4(),\n    //   title: searchfield,\n    //   completed: false\n    // }\n    // this.setState({ todos: [...this.state.todos, newTodo]})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} toggleComplete={this.toggleComplete} deleteTodo={this.deleteTodo} />\n              </Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}